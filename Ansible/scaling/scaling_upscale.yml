---
- name: Deploy Multiple Web Services
  hosts: localhost
  gather_facts: no

  vars_files:
    - credentials.yml

  vars_prompt:
    - name: "vm_name_prefix"
      prompt: "Enter the prefix for VM names:"
      private: no
    - name: "number_of_vms"
      prompt: "Enter the number of VMs to deploy:"
      private: no

  tasks:
    - name: Create VMs from template
      vmware_guest:
        hostname: "{{ vmware_hostname }}"
        username: "{{ vmware_username }}"
        password: "{{ vmware_password }}"
        validate_certs: False
        name: "{{ vm_name_prefix }}{{ '%d' | format(item) }}"
        template: "Web_Template"
        resource_pool: "I490343"
        datacenter: "Netlab-DC"
        folder: "_Courses/I3-DB01/I490343/Web-Servers"
        state: "poweredon"
        cluster: "Netlab-Cluster-B"
        wait_for_ip_address: yes
      loop: "{{ range(1, number_of_vms | int + 1) | list }}"
      loop_control:
        loop_var: item
      delegate_to: localhost
      register: vm_creation_result

    - name: Add dynamically created hosts to inventory
      add_host:
        name: "{{ item.instance.hw_eth0.ipaddresses[0] }}"
        groups: dynamic_hosts
        vm_name: "{{ item.invocation.module_args.name }}"
      loop: "{{ vm_creation_result.results }}"
      loop_control:
        index_var: index

    - name: Update inventory file with dynamically created hosts
      ansible.builtin.copy:
        content: |
          {
              "hosts": {
                  {% for result in vm_creation_result.results %}
                  "{{ result.instance.hw_eth0.ipaddresses[0] }}" : {
                      "vm_names": {{ result.invocation.module_args.name | ansible.builtin.to_json }}
                      }{% if not loop.last %},
                  {% endif %}
                  {% endfor %}
              }
          }
        dest: inventory.json

    - name: Read existing servers from nginx config
      ansible.builtin.shell: |
        awk '/upstream backend/,/}/' /etc/nginx/conf.d/load-balancing.conf | grep -Po 'server \K[^;]+' | sort | uniq
      register: existing_servers
      delegate_to: 10.0.0.11
      remote_user: "{{ remote_user }}"
      vars:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'


    - name: Update Nginx Load Balancer Configuration on Remote Host
      ansible.builtin.blockinfile:
        path: /etc/nginx/conf.d/load-balancing.conf
        block: |
          upstream backend {
              {% for result in vm_creation_result.results %}
              server {{ result.instance.hw_eth0.ipaddresses[0] }};
              {% endfor %}
          }
        insertbefore: '^upstream backend {'
      delegate_to: 10.0.0.11
      remote_user: "{{ remote_user }}"
      vars:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Reload Nginx Configuration
      ansible.builtin.service:
        name: nginx
        state: reloaded
      delegate_to: 10.0.0.11
      remote_user: "{{ remote_user }}"
      vars:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

- name: Install Apache2
  hosts: dynamic_hosts
  become: yes
  vars_files:
    - credentials.yml
  vars:
    ansible_ssh_pass: "{{ ssh_pass }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_become_pass: "{{ ssh_pass }}"
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install Apache2, PHP, and the Apache PHP module
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apache2
        - php
        - libapache2-mod-php

    - name: Copy index.php to /var/www/html/
      copy:
        src: website/index.php
        dest: /var/www/html/index.php

    - name: Remove index.html
      file:
        path: /var/www/html/index.html
        state: absent

    - name: Remove status.conf
      file:
        path: /etc/apache2/mods-enabled/status.conf
        state: absent

    - name: Copy status.conf to /etc/apache2/mods-enabled/
      copy:
        src: website/status.conf
        dest: /etc/apache2/mods-enabled/status.conf

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
